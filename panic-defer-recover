用Go语言异常机制模拟TryCatch异常捕捉
有的同学看到Go和TryCatch一起出现，心里可能会说，难道Go语言升级了，加入了try...catch语句。哈哈，其实Go语言从创建之初就没打算加入try...catch语句，因为创建Go的那帮大爷认为try...catch挺烦人的，如果滥用，会造成程序混乱，所以就不打算加入try...catch（以后加不加入不好说）。
既然Go语言中并没有try...catch语句，那么为何文章标题说要使用TryCatch呢？其实Go语言中只是没有try...catch语句，并不是没有异常处理机制。Go语言中的异常处理机制就是著名的异常三剑客：panic、defer和recover。通过这3个家伙，是完全可以模拟出try...catch语句效果的，对了，后面还应该有个finally。在正式模拟try...catch语句之前，先来回顾下Go语言中的异常处理机制是如何玩的。



////////////////// Go语言中的异常处理机制 //////////////////

在前面提到，Go语言通过panic、defer和recover来处理异常的，那么这3个东西是什么呢？不管是什么异常处理机制，核心的原理都是一样的，通常来讲，一个完善的异常处理机制需要由下面3部分组成。

1. 抛出异常
2. 处理异常的代码段
3.获取异常信息

下面先用Java的异常处理机制来说明这一点。下面的代码是标准的Java异常处理机制，try部分的throw用于抛出异常，而catch部分的代码段用于处理特定的异常，通过catch子句的参数e可以获取异常信息。所以对于Java来说，上述的3个异常重要的组成部分都有。
import java.io.IOException;
 public class Main {
    public static void main(String[] args) {
        try
        {
            boolean ioException = false;
            if (ioException) {
                throw new IOException("ioexception");
            } else {
                throw new Exception("exception");
            }
        }catch (IOException e) {
            System.err.println(e);
        }catch (Exception e) {
            System.out.println(e);
        }finally{
            System.out.println("finally");
        }
    }
}
对于Go语言来说，panic、defer和recover也分别对应了这3部分。其中panic是一个函数，用于抛出异常，相当于Java中的throw函数。defer是一个关键字，用于修饰函数，用defer修饰的函数，在抛出异常时会自动调用。
recover是一个函数，用于获取异常信息，通常在用defer修饰的函数中使用。
下面是一段用Go语言处理异常的代码。

package main

import "fmt"

func main() {
	//  处理异常的函数
	defer func() {
		fmt.Println("开始处理异常")
		// 获取异常信息
		if err := recover(); err != nil {
			//  输出异常信息
			fmt.Println("error:", err)
		}
		fmt.Println("结束异常处理")
	}()
	exceptionFun()
}

func exceptionFun() {
	fmt.Println("exceptionFun开始执行")
	panic("抛出异常信息")
	fmt.Println("exceptionFun执行结束")
}

//输出结果
exceptionFun开始执行
开始处理异常
error: 抛出异常信息
结束异常处理

另外，新开的协程的话，一定要抓一下异常，避免silently crashed
go func() {
	defer func() {
		if r := recover(); r != nil {
			slog.Error("[infinity] init panic", "err", r, "stack", str.Bytes2String(debug.Stack()))
		}
	}()
	scheduler.NewScheduler("xxxx"）
}

———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

//////////////////defer（延迟执行）//////////////////

Go 语言中 defer 的含义与作用
defer 是 Go 语言中一个非常关键的关键字，它的核心含义是：延迟执行。具体来说，defer 修饰的函数调用会在包含它的函数即将返回前执行，无论该函数是正常返回还是因 panic 而提前退出。
执行时机
defer 语句在函数体执行完毕后、返回结果前自动执行
执行顺序：后进先出（LIFO），即最后声明的 defer 最先执行

举例说明
func GoodMd5File(path string) (string, error) {
    file, err := os.Open(path)
    if err != nil {
        return "", err
    }
    defer file.Close() // ✅ 无论后续发生什么，都会执行
    
    hash := md5.New()
    _, err = io.Copy(hash, file)
    if err != nil {
        return "", err // 此时 file.Close() 仍会被调用
    }
    return hex.EncodeToString(hash.Sum(nil)), nil
}
———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

//////////////////另一种错误处理 //////////////////
参考：https://blog.csdn.net/baidu_39340547/article/details/135022883


Error & Panic
错误（Error）：指的是程序中预期会发生的结果，预料之中
打开一个文件：文件正在被占用，可知的。

恐慌（Panic）：不该出现问题的地方出现了问题，预料之外
调用一个对象，发现这个对象是个空指针对象，发生恐慌。

错误是业务的一部分，而恐慌不是。

1.错误 （Error）
鼓励工程师在代码中显式的检查错误，而非忽略错误。

2.恐慌（panic）
恐慌（Panic）是一种非常严重的运行时错误，它表示程序发生了无法恢复的错误。当恐慌发生时，程序会立即停止执行，并开始回退调用栈，执行所有被延迟的函数（deferred functions），最后打印出恐慌信息。
恐慌通常是由程序员无法预料的错误条件触发的，例如数组越界、空指针解引用等。在Go语言中，我们可以使用内置的 panic 函数来引发恐慌。


package main

import (
   "errors"
   "fmt"
)

// 自己定义一个错误,都会返回  error 对象， 本身也是一个类型
// 1、errors.New("xxxxx")
// 2、fmt.Errorf()  
func main() {

   // 方式一
   age_err := setAge(-1)
   if age_err != nil {
      fmt.Println(age_err)
   }
   fmt.Printf("%T\n", age_err) // *errors.errorString

   // 方式二
   errInfo1 := fmt.Errorf("我是一个错误信息：%d\n", 500)
   if errInfo1 != nil {
      // 处理这个错误
      fmt.Println(errInfo1)
   }
}

// 需要处理一些非正常用户的请求，返回值为 error 类型
// 作为一个开发需要不断思考的事情，代码的健壮性和安全性
func setAge(age int) error {
   if age < 0 {
      // 抛出一个错误 errors 包
      return errors.New("年龄不合法")
   }
   // 程序正常的结果，给这个用户赋值
   fmt.Println("年龄设置成功：age=", age)
   return nil
}
———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————




