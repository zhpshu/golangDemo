package main

import (
	"fmt"
	"sync"
	"time"
)

// 定义一个简单任务函数，模拟需要处理的任务
func worker(id int, wg *sync.WaitGroup, semaphore chan struct{}) {
	defer wg.Done()
	defer func() { <-semaphore }() // 从信号量通道中取出一个信号，释放一个槽
	
	// 模拟任务执行
	fmt.Printf("Worker %d: starting\n", id)
	time.Sleep(2 * time.Second)
	fmt.Printf("Worker %d: done\n", id)
}

func main() {
	const numWorkers = 5 // 要运行的任务数量
	const maxConcurrent = 2 // 最大并发数

	var wg sync.WaitGroup
	semaphore := make(chan struct{}, maxConcurrent) // 创建带缓冲的通道，控制最大并发数量

	for i := 1; i <= numWorkers; i++ {
		semaphore <- struct{}{} // 发送信号到信号量通道，如果通道满则阻塞
		wg.Add(1)

		// 启动一个新的 worker goroutine
		go worker(i, &wg, semaphore)
	}

	// 等待所有 goroutine 完成
	wg.Wait()
	fmt.Println("All workers done")
}
